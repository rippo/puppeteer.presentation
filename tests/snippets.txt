    //start to fill in the email address
    it('it shows a validation error when we type a partial email', test(async (browser, opts) => {
        await page.waitFor(EMAIL_SELECTOR);
        await page.type(EMAIL_SELECTOR, "test1");

        const className = await page.$$eval(LABEL_SELECTOR, label => {
            return label[0].className;
        });

        expect(className).to.be.equal('form-group has-error');
    }));

    it('and the submit button is still disabled', test(async (browser, opts) => {

        const buttonIsDisabled = await page.$eval(SUBMIT_SELECTOR, btn => {
            return btn.disabled;
        });

        expect(buttonIsDisabled).to.be.equal(true);
    }));

    //fill in a valid email address
    it('it clears the validation error when we type a valid email', test(async (browser, opts) => {
        await page.type(EMAIL_SELECTOR, "@test.com");

        const className = await page.$$eval(LABEL_SELECTOR, label => {
            return label[0].className;
        });

        expect(className).to.be.equal('form-group');
    }));

    it('and the submit button is still disabled', test(async (browser, opts) => {

        const buttonIsDisabled = await page.$eval(SUBMIT_SELECTOR, btn => {
            return btn.disabled;
        });

        expect(buttonIsDisabled).to.be.equal(true);
    }));

    //fill in a name with 3 chars
    it('it shows a validation error when we type a name of three chars', test(async (browser, opts) => {
        await page.type(NAME_SELECTOR, "Mr ");

        const className = await page.$$eval(LABEL_SELECTOR, label => {
            return label[1].className;
        });

        expect(className).to.be.equal('form-group has-error');
    }));

    it('and the submit button is still disabled', test(async (browser, opts) => {

        const buttonIsDisabled = await page.$eval(SUBMIT_SELECTOR, btn => {
            return btn.disabled;
        });

        expect(buttonIsDisabled).to.be.equal(true);
    }));

    //fill in a validname
    it('it clears the validation error when we type a valid name', test(async (browser, opts) => {
        await page.type(NAME_SELECTOR, " bar");

        const className = await page.$$eval(LABEL_SELECTOR, label => {
            return label[1].className;
        });

        expect(className).to.be.equal('form-group');
    }));

    it('and the submit button is now enabled', test(async (browser, opts) => {

        const buttonIsDisabled = await page.$eval(SUBMIT_SELECTOR, btn => {
            return btn.disabled;
        });

        expect(buttonIsDisabled).to.be.equal(false);
    }));
